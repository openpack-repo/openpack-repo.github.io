#!/bin/bash

if ! grep -q "alias opag='bash $(realpath "$0")'" ~/.bashrc; then
    chmod +x "$(realpath "$0")"
    echo "alias opag='bash $(realpath "$0")'" >> ~/.bashrc
    source ~/.bashrc
fi

show_logo() {
  base64_logo="X19fX19fX18gICAgICAgICAgICAgICAgICAgICAgX19fX19fX19fXyAgICAgICAgICAgICAgICBfXyAgICAKXF9fX19fICBcIF9fX19fXyAgIF9fX18gICBfX19fXF9fX19fXyAgIFxfX19fXyAgICBfX19fIHwgIHwgX18KIC8gICB8ICAgXFxfX19fIFxfLyBfXyBcIC8gICAgXHwgICAgIF9fXy9cX18gIFwgXy8gX19fXHwgIHwvIC8KLyAgICB8ICAgIFwgIHxfPiA+ICBfX18vfCAgIHwgIFwgICAgfCAgICAgLyBfXyBcXCAgXF9fX3wgICAgPCAKXF9fX19fX18gIC8gICBfXy8gXF9fXyAgPl9fX3wgIC9fX19ffCAgICAoX19fXyAgL1xfX18gID5fX3xfIFwKICAgICAgICBcL3xfX3wgICAgICAgIFwvICAgICBcLyAgICAgICAgICAgICAgIFwvICAgICBcLyAgICAgXC8KCg=="
  echo -e "\n$(echo "$base64_logo" | base64 --decode)\n"
  echo "OpenPack v0.1-latte."
  echo -e "Share, change as you wish. Public domain, belongs to all.\n GitHub: @openpack-repo"
}

show_help() {
echo -e "\nOPAG - OpenPack Archive Generator\n"
  echo "Usage: opag [command] [options]"
  echo -e "\nCommands:"
  echo "  help       - Show this help message"
  echo "  create     - Create a new .opag package"
  echo "  install    - Install an existing .opag package"
  echo -e "\nOptions for 'create':"
  echo "  -n <name>  - Name of the package (automatically adds .opag if not present)"
  echo "  -f <file>  - File to add to the package and/or commands to include"
  echo "  -pass      - Password for encryption (strong AES-256 encryption)"
  echo -e "\nOptions for 'install':"
  echo "  <filename> - Name of the .opag package to install"
  echo "  <password> - Password if the package is encrypted"
  echo -e "\nExamples:"
  echo "  opag create -n mypackage -f script.sh -f 'echo Hello' -pass secret"
  echo "  opag install mypackage.opag secret"
}

create_package() {
  local name=""
  local files=()
  local commands=()
  local password=""
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n)
        name="$2"
        shift 2
        ;;
      -f)
        if [[ -f "$2" ]]; then
          files+=("$2")
        else
          commands+=("$2")
        fi
        shift 2
        ;;
      -pass)
        password="$2"
        shift 2
        ;;
      *)
        shift
        ;;
    esac
  done

  if [[ -z "$name" ]]; then
    echo "Error: Package name not specified. Use -n <name>"
    exit 1
  fi

  if [[ "$name" != *.opag ]]; then
    name="${name}.opag"
  fi

  tmp_dir=$(mktemp -d)
  mkdir -p "$tmp_dir/files"
  mkdir -p "$tmp_dir/commands"

  for file in "${files[@]}"; do
    cp "$file" "$tmp_dir/files/"
  done

  for i in "${!commands[@]}"; do
    echo "${commands[$i]}" > "$tmp_dir/commands/command_$i.cmd"
  done

  echo "Files:" > "$tmp_dir/manifest"
  for file in "${files[@]}"; do
    echo "- $(basename "$file")" >> "$tmp_dir/manifest"
  done
  echo -e "\nCommands:" >> "$tmp_dir/manifest"
  for i in "${!commands[@]}"; do
    echo "- ${commands[$i]}" >> "$tmp_dir/manifest"
  done

  tar -czf "$tmp_dir/package.tar.gz" -C "$tmp_dir" files/ commands/ manifest

  if [[ -n "$password" ]]; then
    openssl enc -aes-256-cbc -salt -in "$tmp_dir/package.tar.gz" -out "$name" -pass "pass:$password" -pbkdf2
    echo "Package '$name' created with strong AES-256 encryption."
  else
    base64 "$tmp_dir/package.tar.gz" > "$name"
    echo "Package '$name' created without encryption."
  fi

  rm -rf "$tmp_dir"
}

install_package() {
  if [[ $# -lt 1 ]]; then
    echo "Error: Package name not specified."
    exit 1
  fi

  local package="$1"
  local password=""
  
  if [[ $# -ge 2 ]]; then
    password="$2"
  fi

  if [[ ! -f "$package" ]]; then
    echo "Error: Package '$package' not found."
    exit 1
  fi

  tmp_dir=$(mktemp -d)

  if [[ -n "$password" ]]; then
    if ! openssl enc -d -aes-256-cbc -in "$package" -out "$tmp_dir/package.tar.gz" -pass "pass:$password" -pbkdf2 2>/dev/null; then
      echo "Error: Incorrect password or corrupted package."
      rm -rf "$tmp_dir"
      exit 1
    fi
  else
    if ! base64 -d "$package" > "$tmp_dir/package.tar.gz" 2>/dev/null; then
      echo "Error: Failed to decode package. Maybe it's encrypted?"
      rm -rf "$tmp_dir"
      exit 1
    fi
  fi

  tar -xzf "$tmp_dir/package.tar.gz" -C "$tmp_dir"

  extract_dir="${package%.opag}_extfiles"
  mkdir -p "$extract_dir"

  declare -a items
  declare -a item_types
  counter=1

  if [[ -d "$tmp_dir/files" ]]; then
    for file in "$tmp_dir/files"/*; do
      if [[ -f "$file" ]]; then
        items[$counter]="$file"
        item_types[$counter]="file"
        ((counter++))
      fi
    done
  fi

  if [[ -d "$tmp_dir/commands" ]]; then
    for cmd_file in "$tmp_dir/commands"/*.cmd; do
      if [[ -f "$cmd_file" ]]; then
        items[$counter]="$cmd_file"
        item_types[$counter]="command"
        ((counter++))
      fi
    done
  fi

  echo -e "\nPackage contents:"
  echo "Files:"
  for i in "${!items[@]}"; do
    if [[ "${item_types[$i]}" == "file" ]]; then
      echo "$i. $(basename "${items[$i]}")"
    fi
  done
  
  echo -e "\nCommands:"
  for i in "${!items[@]}"; do
    if [[ "${item_types[$i]}" == "command" ]]; then
      echo "$i. $(cat "${items[$i]}")"
    fi
  done

  echo -e "\nChoose action:"
  echo "all  - Execute all commands and extract all files"
  echo "N    - Execute specific items (comma-separated numbers, e.g. 1,3,5)"
  echo "deny - Cancel installation"
  read -p "Your choice: " choice

  case "$choice" in
    all)
      for i in "${!items[@]}"; do
        if [[ "${item_types[$i]}" == "command" ]]; then
          echo "Executing: $(cat "${items[$i]}")"
          eval "$(cat "${items[$i]}")"
        elif [[ "${item_types[$i]}" == "file" ]]; then
          cp "${items[$i]}" "$extract_dir/"
        fi
      done
      echo "All items processed. Files extracted to $extract_dir"
      ;;
    deny)
      echo "Installation cancelled."
      rm -rf "$tmp_dir" "$extract_dir"
      exit 0
      ;;
    *)
      IFS=',' read -ra selections <<< "$choice"
      for sel in "${selections[@]}"; do
        sel=$(echo "$sel" | tr -d '[:space:]') # Удаляем пробелы
        if [[ "$sel" =~ ^[0-9]+$ && -n "${items[$sel]}" ]]; then
          if [[ "${item_types[$sel]}" == "command" ]]; then
            echo "Executing $sel: $(cat "${items[$sel]}")"
            eval "$(cat "${items[$sel]}")"
          elif [[ "${item_types[$sel]}" == "file" ]]; then
            echo "Extracting $sel: $(basename "${items[$sel]}")"
            cp "${items[$sel]}" "$extract_dir/"
          fi
        else
          echo "Warning: Item $sel not found or invalid."
        fi
      done
      echo "Selected items processed. Files extracted to $extract_dir"
      ;;
  esac

  rm -rf "$tmp_dir"
}

case "$1" in
  help)
    show_logo
    show_help
    ;;
  create)
    shift
    create_package "$@"
    ;;
  install)
    shift
    install_package "$@"
    ;;
  *)
    show_logo
    show_help
    exit 1
    ;;
esac
